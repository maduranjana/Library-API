# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build & Deploy to Cloud Run

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  REGION: ${{ secrets.GCP_REGION }}
  ARTIFACT_REPO: ${{ secrets.ARTIFACT_REPO }}
  SERVICE_NAME: spring-app

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Build (Maven)
        run: |
          # use your build command: mvn package or ./gradlew build
          chmod +x mvnw || true
          ./mvnw -B -DskipTests package

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install gcloud SDK
        uses: google-github-actions/setup-gcloud@v3
        with:
          project_id: ${{ env.PROJECT_ID }}
          export_default_credentials: true
          version: 'latest'

      - name: Configure docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${REGION}-docker.pkg.dev --quiet
        env:
          REGION: ${{ env.REGION }}

      - name: Build & push Docker image
        run: |
          REGION=${{ env.REGION }}
          PROJECT=${{ env.PROJECT_ID }}
          REPO=${{ env.ARTIFACT_REPO }}
          SERVICE=${{ env.SERVICE_NAME }}
          IMAGE_URI=${REGION}-docker.pkg.dev/$PROJECT/$REPO/$SERVICE:${{ github.sha }}
          echo "IMAGE_URI=$IMAGE_URI"
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Deploy to Cloud Run
        run: |
          REGION=${{ env.REGION }}
          PROJECT=${{ env.PROJECT_ID }}
          SERVICE=${{ env.SERVICE_NAME }}
          IMAGE_URI=${REGION}-docker.pkg.dev/$PROJECT/${{ env.ARTIFACT_REPO }}/$SERVICE:${{ github.sha }}
          gcloud run deploy $SERVICE \
            --image=$IMAGE_URI \
            --platform=managed \
            --region=$REGION \
            --allow-unauthenticated \
            --min-instances=0 \
            --memory=512Mi \
            --concurrency=80 \
            --quiet
